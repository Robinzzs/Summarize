To install TensorFlow in Centos, there are
several steps should followed.

* Install nvidia gpu driver software
** Check kernel version
#+BEGIN_SRC shell
  uname -r
  3.10.0-957.1.3.el7.x86_64
  df  #check room of /boot
#+END_SRC

** Shutdown nouveau dirve
Nouveau is system-built display driver,
need to be banned first.
#+BEGIN_SRC shell
  vim /etc/modprobe.d/nvidia-installer-disable-nouveau.conf
  vim /lib/modprobe.d/nvidia-installer-disable-nouveau.conf
  # add following command
  blacklist nouveau
  options nouveau modeset=0
#+END_SRC

** Rebuild initramfs imag
Make sure room of /boot > 400MB
#+BEGIN_SRC shell
  cp /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak
  dracut /boot/initramfs-$(uname -r).img $(uname -r)
  # rm /boot/initramfs-$(uname -r).img.bak ; 这一步可不执行
#+END_SRC

** Reboot text interface
#+BEGIN_SRC shell
  systemctl set-default multi-user.target
  init 3
  reboot
#+END_SRC

** Installer nvidia gpu driver
From nvidia web download corresponding dirver
such as:  NVIDIA-Linux-x86_64-390.87.run
kernel source path must be assigned
#+BEGIN_SRC shell
  ## yum install dkms
  chmod +x NVIDIA-Linux-x86_64-390.87.run
  ./NVIDIA-Linux-x86_64-390.87.run --kernel-source-path=/usr/src/kernels/$(uname -r)  -k $(uname -r) #--dkms -s
  # systemctl set-default graphical.target
#+END_SRC
then dirver installation done

PS:
Turn off the UEFI in BIOS, it will lead to some kernel errors.

--kernel-source-path=KERNEL-SOURCE-PATH
      The directory containing the kernel source files that
      should be used when compiling the NVIDIA kernel module.
      When not specified, the installer will use
      '/lib/modules/`uname -r`/build', if that directory exists.
      Otherwise, it will use '/usr/src/linux'.

-k KERNEL-NAME, --kernel-name=KERNEL-NAME
      Build and install the NVIDIA kernel module for the
      non-running kernel specified by KERNEL-NAME (KERNEL-NAME
      should be the output of `uname -r` when the target kernel
      is actually running).  This option implies
      '--no-precompiled-interface'.  If the options
      '--kernel-install-path' and '--kernel-source-path' are not
      given, then they will be inferred from KERNEL-NAME; eg:
      '/lib/modules/KERNEL-NAME/kernel/drivers/video/' and
      '/lib/modules/KERNEL-NAME/build/', respectively.

--dkms
      nvidia-installer can optionally register the NVIDIA kernel
      module sources, if installed, with DKMS, then build and
      install a kernel module using the DKMS-registered sources.
      This will allow the DKMS infrastructure to automatically
      build a new kernel module when changing kernels.  During
      installation, if DKMS is detected, nvidia-installer will
      ask the user if they wish to register the module with DKMS;
      the default response is 'no'.  This option will bypass the
      detection of DKMS, and cause the installer to attempt a
      DKMS-based installation regardless of whether DKMS is
      present.
      //可以将Nvidia模块编译进内核默认加载模块，以后升级内核时不需要重新重新安装驱动

-s, --silent
      Run silently; no questions are asked and no output is
      printed, except for error messages to stderr.  This option
      implies '--ui=none --no-questions'.
      //silence模式安装，去掉-s是交互式模式安装



** Check dirver situation
#+BEGIN_SRC shell
  lspci |grep NVIDIA
  nvidia-smi
#+END_SRC

* Install nvidia cuda software
** Install cuda
From nvidia web download corresponding version
such as: zcuda_9.0.176_384.81_linux.run
#+BEGIN_SRC shell
  chmod +x cuda_9.0.176_384.81_linux.run
  ./cuda_9.0.176_384.81_linux.run
  Install NVIDIA Accelerated Graphics Driver ... -no
  Install OpenGL ... -no
  Install CUDA 9.0 Toolkit ... -yes
  Toolkit location /usr/local/cuda-9.0 ... [Enter]
  Install a symbolic link at ... -yes
  Install CUDA 9.0 Samples ... -yes
  Enter CUDA Samples Location ... [Enter]
#+END_SRC

** Configure environment variable
In .bashrc, .bash_profile or .zshrc
#+BEGIN_SRC shell
  export PATH=/usr/local/cuda/bin:$PATH
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
#+END_SRC
Then
#+BEGIN_SRC shell
  source .bashrc #(.bash_profile or .zshrc)
#+END_SRC

** Test cuda
#+BEGIN_SRC shell
  nvcc --version
  cd /NVIDIA_CUDA-9.0_Samples
  cd 1_Utilities/deviceQuery
  make
  ./deviceQuery
#+END_SRC

** Turn into graphic interface
#+BEGIN_SRC shell
  systemctl set-default graphical.target
  init 5
#+END_SRC

* Install nvidia cudnn software
From nvidia web download corresponding version
such as:cudnn-9.0-linux-x64-v7.4.2.24.tgz
#+BEGIN_SRC shell
  tar -xvzf cudnn-9.0-linux-x64-v7.4.2.24.tgz
  cd cuda/
  cp include/* /usr/local/cuda/include
  cp lib64/* /usr/local/cuda/lib64
#+END_SRC

* Install Aanaconda
From Anaconda web download corresponding version
such as:Anaconda2-5.2.0-Linux-x86_64.sh
#+BEGIN_SRC shell
  chmod +x Anaconda2-5.2.0-Linux-x86_64.sh
  ./Anaconda2-5.2.0-Linux-x86_64.sh
#+END_SRC

* Install TenserFlow and fix bug
** Install TenserFlow
#+BEGIN_SRC shell
  pip install tensorflow-gpu
#+END_SRC

** Test TensorFlow
#+BEGIN_SRC python
python
>>> import tensorflow as tf
>>> hello = tf.constant('Hello, TensorFlow!')
>>> sess = tf.Session()
#+END_SRC

** fix bug

*** bug imformation:
#+BEGIN_SRC
 /home/user/bin/conda3/lib/python3.6/site-packages/h5py/__init__.py:34:
 FutureWarning: Conversion of the second argument of issubdtype from
 float to np.floating is deprecated. In future, it will be treated as
 np.float64 == np.dtype(float).type. from ._conv import
 register_converters as _register_converters
#+END_SRC

#+BEGIN_SRC shell
  pip install numpy==1.13.0
  pip install h5py==2.8.0rc1
  pip install --upgrade h5py
#+END_SRC

*** bug imformation:
#+BEGIN_SRC
I tensorflow/stream_executor/dso_loader.cc:142] Couldn't open CUDA
library libcupti.so.9.0. LD_LIBRARY_PATH: /usr/local/cuda-9.0/lib64

2018-05-08 09:47:01.684585: F ./tensorflow/stream_executor/lib/
statusor.h:212] Non-OK-status: status_ status: Failed precondition:
 could not dlopen DSO: libcupti.so.9.0; dlerror: libcupti.so.9.0:
 cannot open shared object file: No such file or directory
Aborted (core dumped)
#+END_SRC

add in .bashrc (.bash_profile or .zshrc)
#+BEGIN_SRC shell
  export LD_LIBRARY_PATH="/usr/local/cuda-9.0/lib64:/usr/local/cuda-9.0/extras/CUPTI/lib64"
#+END_SRC
